# Herbarium Bot - Cursor Rules

## Project Overview
This is a Telegram bot that processes plant photos, extracts metadata, identifies species using Pl@ntNet, and creates GitHub pull requests to update a portfolio herbarium collection. The project follows a modular architecture with clear separation of concerns.

## Technology Stack
- **Python 3.12+** with modern type hints
- **python-telegram-bot** for Telegram integration
- **Pl@ntNet API** for plant identification
- **GitHub API** for repository operations
- **Jinja2** for template rendering
- **Pillow + piexif** for image and EXIF processing
- **uv** for package management
- **pytest** for testing

## Code Style & Patterns

### File Organization
- Keep modules focused and single-purpose
- Use descriptive file names that reflect their functionality
- Place shared utilities in dedicated modules (e.g., `exif_utils.py`, `config.py`)
- Avoid classes unless they represent clear domain entities or stateful services

### Python Conventions
- Use type hints for all function parameters and return values
- Follow PEP 8 style guidelines
- Use f-strings for string formatting
- Prefer list/dict comprehensions over loops when appropriate
- Use dataclasses for data models (see `plant_entry.py`)
- Use union types (`|`) instead of `Optional` for nullable types (e.g., `str | None` instead of `Optional[str]`)

### Error Handling
- Use specific exception types rather than generic `Exception`
- Provide meaningful error messages
- Log errors with appropriate context
- Handle API failures gracefully with retry logic

### Configuration
- Use environment variables for all sensitive data
- Centralize configuration in `config.py`
- Validate required environment variables on startup

## Architecture Patterns

### Handler Pattern
- Telegram handlers should be focused and handle one type of message
- Use async/await consistently
- Extract business logic from handlers into service classes
- Return meaningful responses to users

### Service Layer
- Separate API interactions into dedicated service classes
- Use dependency injection for external services
- Implement proper error handling and retries
- Cache results when appropriate

### Data Models
- Use dataclasses for structured data
- Implement validation methods where needed
- Use enums for fixed sets of values
- Provide clear string representations

## Testing Guidelines
- Write unit tests for all business logic
- Mock external API calls in tests
- Use pytest fixtures for common test data
- Test both success and failure scenarios
- Aim for high test coverage

## Documentation Standards
- Use docstrings for all public functions and classes
- Follow Google-style docstring format
- Include examples in docstrings for complex functions
- Keep README.md updated with new features

## Security Considerations
- Never log sensitive data (tokens, API keys)
- Validate all user inputs
- Use environment variables for secrets
- Implement rate limiting for API calls
- Sanitize file paths and names

## Performance Guidelines
- Use async/await for I/O operations
- Implement caching for expensive operations
- Use connection pooling for HTTP requests

## Common Patterns

### API Integration